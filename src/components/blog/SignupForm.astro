---
// src/components/blog/SignupForm.astro
interface Props {
	location?: "post" | "standalone";
}
const { location = "standalone" } = Astro.props;
---

<div
	class="card mx-auto transition transform hover:scale-105 hover:shadow-lg border-green-100"
>
	<div class="text-center mb-6">
		<h3 class="text-2xl font-display font-bold text-gray-800">
			Stay Updated
		</h3>
		<p class="text-gray-600">
			Sign up to get notified about new posts and insights.
		</p>
	</div>
	<form id="subscribeForm" class="space-y-4" novalidate>
		<div class="relative">
			<input
				type="email"
				id="email"
				name="email"
				required
				placeholder="you@example.com"
				class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500 transition"
				aria-label="Email address"
			/>
			<div id="emailError" class="hidden text-red-500 text-sm mt-1"></div>
		</div>
		<button type="submit" class="w-full btn btn-primary">
			Subscribe
		</button>
		<div
			id="formMessage"
			class="text-sm text-center mt-3 hidden"
			role="status"
			aria-live="polite"
		>
		</div>
	</form>
</div>

<script>
	// Cast elements to the proper types to avoid TypeScript errors.
	const form = document.getElementById("subscribeForm") as HTMLFormElement;
	const messageEl = document.getElementById("formMessage") as HTMLElement;
	const emailInput = document.getElementById("email") as HTMLInputElement;
	const emailError = document.getElementById("emailError") as HTMLElement;

	if (form && messageEl && emailInput && emailError) {
		emailInput.addEventListener("input", () => {
			emailInput.setCustomValidity("");
			emailError.classList.add("hidden");
			emailError.textContent = "";
		});

		emailInput.addEventListener("invalid", () => {
			emailError.textContent =
				emailInput.value === ""
					? "Please enter your email."
					: "Enter a valid email.";
			emailError.classList.remove("hidden");
		});

		form.addEventListener("submit", async (e) => {
			e.preventDefault();
			if (!form.checkValidity()) return;
			const submitButton = form.querySelector(
				"button"
			) as HTMLButtonElement;
			if (!submitButton) return;
			submitButton.disabled = true;
			submitButton.innerHTML = `
                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Subscribing...
            `;
			try {
				const formData = new FormData(form);
				const response = await fetch("/api/signup", {
					method: "POST",
					body: formData,
				});
				const data = await response.json();
				messageEl.textContent = data.message;
				messageEl.className = `text-sm text-center mt-3 ${response.ok ? "text-green-600" : "text-red-600"}`;
				messageEl.classList.remove("hidden");
				if (response.ok) {
					form.reset();
					submitButton.innerHTML = `
                        <svg class="inline-block -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                        Subscribed!
                    `;
					setTimeout(() => {
						submitButton.innerHTML = `Subscribe`;
						submitButton.disabled = false;
						messageEl.classList.add("hidden");
					}, 4000);
				} else {
					submitButton.innerHTML = `Subscribe`;
					submitButton.disabled = false;
				}
			} catch (err) {
				console.error("Subscription error:", err);
				messageEl.textContent = "Error occurred. Try again.";
				messageEl.className = "text-sm text-center mt-3 text-red-600";
				messageEl.classList.remove("hidden");
				submitButton.innerHTML = `Subscribe`;
				submitButton.disabled = false;
			}
		});
	}
</script>
