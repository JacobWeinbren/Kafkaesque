---
import "@/styles/globals.css";
import { join } from "node:path";
import { AstroFont } from "astro-font";
import Logo from "@/img/logo_white.webp";

const permalink = `${Astro.url.origin}${Astro.url.pathname}`;

const { title, description, image } = Astro.props;
---

<head>
	<title>{title}</title>

	<!-- Meta details -->
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="description" content={description} />

	<!-- Favicon -->
	<link
		rel="apple-touch-icon"
		sizes="180x180"
		href="/favicon/apple-touch-icon.png"
	/>
	<link
		rel="icon"
		type="image/png"
		sizes="32x32"
		href="/favicon/favicon-32x32.png"
	/>
	<link
		rel="icon"
		type="image/png"
		sizes="16x16"
		href="/favicon/favicon-16x16.png"
	/>
	<link rel="icon" type="image/x-icon" href="/favicon/favicon.ico" />
	<link rel="manifest" href="/favicon/site.webmanifest" />

	<!-- Open Graph Tags (Facebook) -->
	<meta property="og:type" content="website" />
	<meta property="og:title" content={title} />
	{permalink && <meta property="og:url" content={permalink} />}
	{description && <meta property="og:description" content={description} />}
	<meta
		property="og:image"
		content={image || `${Astro.url.origin}${Logo.src}`}
	/>

	<!-- Twitter -->
	<meta property="twitter:card" content="summary_large_image" />
	<meta property="twitter:title" content={title} />
	{permalink && <meta property="twitter:url" content={permalink} />}
	{
		description && (
			<meta property="twitter:description" content={description} />
		)
	}
	<meta
		property="twitter:image"
		content={image || `${Astro.url.origin}${Logo.src}`}
	/>

	<!-- Font -->
	<AstroFont
		config={[
			{
				src: [],
				name: "Inter",
				display: "swap",
				selector: "html",
				fallback: "sans-serif",
				googleFontsURL:
					"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap",
			},
			{
				name: "Kafka",
				src: [
					{
						style: "normal",
						weight: "400",
						path: join(
							process.cwd(),
							"public",
							"fonts",
							"Kafka-webfont.woff2"
						),
					},
					{
						style: "normal",
						weight: "400",
						path: join(
							process.cwd(),
							"public",
							"fonts",
							"Kafka-webfont.woff"
						),
					},
				],
				preload: true,
				display: "swap",
				fallback: "sans-serif",
			},
		]}
	/>

	<script is:inline>
		const THEME_KEY = "theme";
		const DARK_CLASS = "dark";
		const isLocalStorageAvailable = typeof localStorage !== "undefined";

		// Function to toggle dark theme on a document
		const toggleDarkTheme = (isDark) => {
			document.documentElement.classList[isDark ? "add" : "remove"](
				DARK_CLASS
			);
			if (isLocalStorageAvailable) {
				localStorage.setItem(THEME_KEY, isDark ? DARK_CLASS : "light");
			}
			updateDataWrapperSrc(isDark);
		};

		// Function to update all Datawrapper embed URLs
		const updateDataWrapperSrc = (isDark) => {
			const dataWrapperIframes = document.querySelectorAll(
				'iframe[src*="datawrapper.dwcdn.net/"]'
			);
			dataWrapperIframes.forEach((iframe) => {
				const src = iframe.getAttribute("src");
				const newSrc =
					src.split("?")[0] + `?dark=${isDark ? "true" : "false"}`;
				iframe.setAttribute("src", newSrc);
			});
		};

		// Function to get the theme preference
		const getThemePreference = () => {
			if (isLocalStorageAvailable && localStorage.getItem(THEME_KEY)) {
				return localStorage.getItem(THEME_KEY) === DARK_CLASS;
			}
			return window.matchMedia("(prefers-color-scheme: dark)").matches;
		};

		// Initial theme application
		toggleDarkTheme(getThemePreference());
	</script>
</head>
