---
export const prerender = true;
import BaseLayout from "@/components/layout/BaseLayout.astro";
import SignupForm from "@/components/blog/SignupForm.svelte";
import { getAllPosts, getPost } from "@/lib/hashnode";
import { formatDate } from "@/utils/helpers";
import { ChevronLeftIcon } from "@heroicons/react/24/outline";

export async function getStaticPaths() {
	console.log("getStaticPaths: Fetching all post slugs/summaries...");
	const allPostSummaries = await getAllPosts();
	console.log(
		`getStaticPaths: Found ${allPostSummaries.length} post summaries.`
	);

	const paths = await Promise.all(
		allPostSummaries.map(async (summary) => {
			if (!summary || !summary.slug) {
				console.error(
					"getStaticPaths: Skipping invalid post summary:",
					summary
				);
				return null;
			}

			console.log(
				`getStaticPaths: Fetching full post data for slug: ${summary.slug}`
			);
			const fullPostData = await getPost(summary.slug);

			if (!fullPostData) {
				console.error(
					`getStaticPaths: Failed to fetch full data for slug '${summary.slug}'. Skipping page generation.`
				);
				return null;
			}

			return {
				params: { slug: summary.slug },
				props: { post: fullPostData },
			};
		})
	);

	const validPaths = paths.filter(Boolean);
	console.log(
		`getStaticPaths: Successfully prepared ${validPaths.length} pages for generation.`
	);
	return validPaths;
}

const { post } = Astro.props;

if (!post) {
	throw new Error(
		`Build Error: Post data was unexpectedly missing in Astro.props for slug '${Astro.params.slug}'. Check the props returned by getStaticPaths.`
	);
}
---

{/* Rest of the component remains the same */}
<BaseLayout
	title={post.title}
	description={post.subtitle || post.brief}
	image={post.coverImage || undefined}
	article={true}
>
	<article class="max-w-3xl mx-auto px-4 py-8">
		{/* Cover Image */}
		{
			post.coverImage && (
				<div class="mb-8">
					<img
						src={post.coverImage}
						alt={post.title}
						class="w-full h-auto max-h-[50vh] object-cover rounded-lg shadow-md"
						loading="lazy"
						decoding="async"
						width="896"
						height="504"
					/>
				</div>
			)
		}
		{/* Header */}
		<header class="mb-8">
			<time class="text-green-700 text-sm font-medium">
				{formatDate(post.publishedAt)}
			</time>
			<h1
				class="text-3xl md:text-4xl font-bold mt-2 mb-3 font-display text-gray-900"
			>
				{post.title}
			</h1>
			{
				post.subtitle && (
					<p class="text-lg text-gray-600">{post.subtitle}</p>
				)
			}
			{
				post.tags && post.tags.length > 0 && (
					<div class="flex flex-wrap gap-2 mt-4">
						{post.tags.map((tag) => (
							<span class="bg-green-50 text-green-700 px-2 py-1 rounded-md text-xs">
								{tag.name}
							</span>
						))}
					</div>
				)
			}
		</header>
		{
			/* Content - This will now work because 'post' has the 'content' field */
		}
		<div class="prose prose-custom max-w-none">
			<Fragment set:html={post.content} />
		</div>
		{/* Signup Form */}
		<div class="mt-10 border-t pt-8">
			<SignupForm client:visible />
		</div>
		{/* Back Link */}
		<div class="mt-6 text-center">
			<a
				href="/blog"
				class="inline-flex items-center text-green-700 hover:text-green-800 transition text-sm"
			>
				<ChevronLeftIcon className="w-4 h-4 mr-1" />
				Back to Blog
			</a>
		</div>
	</article>
</BaseLayout>
